# AgentX All-in-One 镜像 - 终极版本
# 真正的一键部署：前端 + 后端 + 数据库

# 多阶段构建 - 前端
FROM node:18-alpine AS frontend-builder
WORKDIR /app
COPY agentx-frontend-plus/package*.json ./
RUN npm install --legacy-peer-deps
COPY agentx-frontend-plus/ ./
RUN npm run build

# 多阶段构建 - 后端
FROM maven:3.9-eclipse-temurin-17 AS backend-builder
WORKDIR /app
COPY AgentX/pom.xml ./
COPY AgentX/src ./src
RUN mvn clean package -DskipTests

# 最终运行镜像 - 基于 PostgreSQL 镜像
FROM postgres:15-alpine

# 安装 Node.js 和 OpenJDK
RUN apk add --no-cache \
    nodejs \
    npm \
    openjdk17-jre \
    curl \
    bash \
    supervisor

# 设置 PostgreSQL 环境
ENV POSTGRES_DB=agentx
ENV POSTGRES_USER=agentx_user
ENV POSTGRES_PASSWORD=agentx_pass
ENV PGDATA=/var/lib/postgresql/data

# 创建应用目录
WORKDIR /app

# 复制前端构建产物
COPY --from=frontend-builder /app/.next/standalone /app/frontend/
COPY --from=frontend-builder /app/.next/static /app/frontend/.next/static
COPY --from=frontend-builder /app/public /app/frontend/public

# 复制后端 JAR 文件
COPY --from=backend-builder /app/target/*.jar /app/backend.jar

# 创建数据库初始化脚本
RUN mkdir -p /docker-entrypoint-initdb.d && \
    echo "CREATE DATABASE agentx;" > /docker-entrypoint-initdb.d/01-init.sql && \
    echo "GRANT ALL PRIVILEGES ON DATABASE agentx TO agentx_user;" >> /docker-entrypoint-initdb.d/01-init.sql

# 创建应用配置文件
RUN printf 'server:\n  port: 8080\n  servlet:\n    context-path: /api\n\nspring:\n  application:\n    name: AgentX\n  datasource:\n    driver-class-name: org.postgresql.Driver\n    url: jdbc:postgresql://localhost:5432/agentx\n    username: agentx_user\n    password: agentx_pass\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: false\n\nmcp:\n  gateway:\n    api-key: 123456\n    base-url: http://localhost:8005\n\nhigh-availability:\n  enabled: false\n\nlogging:\n  level:\n    root: info\n    org.xhy: debug\n' > /app/application-allinone.yml

# 创建 supervisor 配置
RUN mkdir -p /etc/supervisor/conf.d && \
    printf '[supervisord]\nnodaemon=true\nuser=root\nlogfile=/var/log/supervisor/supervisord.log\npidfile=/var/run/supervisord.pid\n\n[program:postgres]\ncommand=/usr/local/bin/docker-entrypoint.sh postgres\nuser=postgres\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/postgres.log\nstderr_logfile=/var/log/postgres.log\nenvironment=POSTGRES_DB="agentx",POSTGRES_USER="agentx_user",POSTGRES_PASSWORD="agentx_pass"\n\n[program:backend]\ncommand=java -jar /app/backend.jar --spring.config.additional-location=file:/app/application-allinone.yml\ndirectory=/app\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/backend.log\nstderr_logfile=/var/log/backend.log\n\n[program:frontend]\ncommand=node server.js\ndirectory=/app/frontend\nuser=root\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/frontend.log\nstderr_logfile=/var/log/frontend.log\nenvironment=PORT="3000",HOSTNAME="0.0.0.0"\n' > /etc/supervisor/conf.d/agentx.conf

# 创建启动脚本
RUN printf '#!/bin/bash\n\necho "🚀 Starting AgentX All-in-One System"\necho "====================================="\n\n# 初始化 PostgreSQL 数据目录\nif [ ! -d "$PGDATA" ]; then\n    echo "🔧 Initializing PostgreSQL database..."\n    mkdir -p "$PGDATA"\n    chown postgres:postgres "$PGDATA"\n    su - postgres -c "initdb -D $PGDATA"\nfi\n\n# 创建日志目录\nmkdir -p /var/log/supervisor\n\necho "🎯 Starting all services with supervisor..."\n\n# 启动 supervisor\nexec /usr/bin/supervisord -c /etc/supervisor/conf.d/agentx.conf\n' > /app/start-agentx.sh

RUN chmod +x /app/start-agentx.sh

# 创建必要目录和设置权限
RUN mkdir -p /var/lib/postgresql/data /var/log && \
    chown -R postgres:postgres /var/lib/postgresql && \
    chmod 755 /var/log

# 暴露端口
EXPOSE 3000 8080 5432

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=180s --retries=3 \
    CMD curl -f http://localhost:3000 && curl -f http://localhost:8080/api/actuator/health || exit 1

# 创建最终启动脚本，包含用户友好的输出
RUN printf '#!/bin/bash\n\necho "🎉 Welcome to AgentX All-in-One!"\necho "================================"\necho ""\necho "🔧 Initializing system..."\n\n# 启动应用\n/app/start-agentx.sh &\nAPP_PID=$!\n\n# 等待服务启动\necho "⏳ Waiting for services to start (this may take 2-3 minutes)..."\nsleep 30\n\n# 检查服务状态\nfor i in {1..60}; do\n    if curl -s http://localhost:3000 >/dev/null 2>&1; then\n        echo ""\n        echo "✅ All services are ready!"\n        echo ""\n        echo "🌐 Access URLs:"\n        echo "   Frontend:  http://localhost:3000"\n        echo "   Backend:   http://localhost:8080/api"\n        echo "   Database:  postgresql://agentx_user:agentx_pass@localhost:5432/agentx"\n        echo ""\n        echo "👤 Default Accounts:"\n        echo "   Admin: admin@agentx.ai / admin123"\n        echo "   User:  test@agentx.ai / test123"\n        echo ""\n        echo "📚 Documentation: https://github.com/lucky-aeon/agentx"\n        echo "🆘 Support: https://github.com/lucky-aeon/agentx/issues"\n        echo ""\n        break\n    fi\n    \n    if [ $((i %% 10)) -eq 0 ]; then\n        echo "   Still starting... ($i/60)"\n    fi\n    sleep 3\ndone\n\n# 保持容器运行\nwait $APP_PID\n' > /docker-entrypoint.sh

RUN chmod +x /docker-entrypoint.sh

# 设置入口点
ENTRYPOINT ["/docker-entrypoint.sh"]