# AgentX一体化镜像 - 包含前端和后端
# 用于生产环境部署和CI/CD构建

# 第一阶段：构建后端
FROM maven:3.9.6-eclipse-temurin-17 AS backend-builder
WORKDIR /build

# 复制后端Maven配置
COPY AgentX/pom.xml ./
COPY AgentX/mvnw ./
COPY AgentX/.mvn ./.mvn

# 下载依赖（利用Docker缓存）
RUN ./mvnw dependency:go-offline -B

# 复制后端源代码并构建
COPY AgentX/src ./src
RUN ./mvnw clean package -DskipTests -B

# 第二阶段：构建前端
FROM node:18-alpine AS frontend-builder
WORKDIR /build

# 复制前端package文件
COPY agentx-frontend-plus/package*.json ./

# 安装依赖
RUN npm ci --legacy-peer-deps --only=production

# 复制前端源代码并构建
COPY agentx-frontend-plus/ .
RUN npm run build

# 第三阶段：运行时镜像
FROM nginx:1.25-alpine

# 安装必要工具
RUN apk add --no-cache \
    openjdk17-jre \
    curl \
    bash \
    supervisor

# 创建应用目录
WORKDIR /app

# 复制构建产物
COPY --from=backend-builder /build/target/*.jar /app/backend.jar
COPY --from=frontend-builder /build/.next/standalone /app/frontend/
COPY --from=frontend-builder /build/.next/static /app/frontend/.next/static
COPY --from=frontend-builder /build/public /app/frontend/public
COPY --from=frontend-builder /build/package.json /app/frontend/

# 创建nginx配置
RUN printf 'server {\n\
    listen 80;\n\
    \n\
    location /api/ {\n\
        proxy_pass http://localhost:8080/api/;\n\
        proxy_set_header Host $host;\n\
        proxy_set_header X-Real-IP $remote_addr;\n\
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
        proxy_set_header X-Forwarded-Proto $scheme;\n\
    }\n\
    \n\
    location / {\n\
        proxy_pass http://localhost:3000/;\n\
        proxy_set_header Host $host;\n\
        proxy_set_header X-Real-IP $remote_addr;\n\
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
        proxy_set_header X-Forwarded-Proto $scheme;\n\
    }\n\
}\n' > /etc/nginx/conf.d/default.conf

# 创建supervisor目录和主配置
RUN mkdir -p /etc/supervisor/conf.d
RUN printf '[supervisord]\n\
nodaemon=true\n\
user=root\n\
\n\
[unix_http_server]\n\
file=/tmp/supervisor.sock\n\
\n\
[supervisorctl]\n\
serverurl=unix:///tmp/supervisor.sock\n\
\n\
[rpcinterface:supervisor]\n\
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\
\n\
[include]\n\
files = /etc/supervisor/conf.d/*.conf\n' > /etc/supervisor/supervisord.conf
RUN printf '[program:backend]\n\
command=java -Xms512m -Xmx1024m -XX:+UseG1GC -jar /app/backend.jar\n\
directory=/app\n\
autostart=true\n\
autorestart=true\n\
priority=10\n\
environment=SPRING_PROFILES_ACTIVE=prod\n\
stdout_logfile=/var/log/supervisor/backend.log\n\
stderr_logfile=/var/log/supervisor/backend.log\n\
\n\
[program:frontend]\n\
command=node server.js\n\
directory=/app/frontend\n\
autostart=true\n\
autorestart=true\n\
priority=20\n\
environment=NODE_ENV=production,PORT=3000,HOSTNAME=0.0.0.0\n\
stdout_logfile=/var/log/supervisor/frontend.log\n\
stderr_logfile=/var/log/supervisor/frontend.log\n\
\n\
[program:nginx]\n\
command=/usr/sbin/nginx -g "daemon off;"\n\
autostart=true\n\
autorestart=true\n\
priority=30\n\
stdout_logfile=/var/log/supervisor/nginx.log\n\
stderr_logfile=/var/log/supervisor/nginx.log\n' > /etc/supervisor/conf.d/agentx.conf

# 创建日志目录
RUN mkdir -p /var/log/supervisor /app/logs /app/storage

# 暴露端口
EXPOSE 80 8080 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:80/api/health || exit 1

# 设置默认环境变量
ENV SPRING_PROFILES_ACTIVE=prod \
    NODE_ENV=production \
    NEXT_PUBLIC_API_BASE_URL=http://localhost/api \
    DB_HOST=localhost \
    DB_PORT=5432 \
    DB_NAME=agentx \
    DB_USER=agentx_user \
    DB_PASSWORD=agentx_pass \
    RABBITMQ_HOST=localhost \
    RABBITMQ_PORT=5672 \
    RABBITMQ_USERNAME=guest \
    RABBITMQ_PASSWORD=guest \
    JWT_SECRET=agentx_jwt_secret_please_change_in_production

# 启动命令
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]