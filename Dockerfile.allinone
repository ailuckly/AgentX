# AgentX All-in-One 镜像
# 包含前端、后端和服务编排

# 多阶段构建 - 前端
FROM node:18-alpine AS frontend-builder
WORKDIR /app
COPY agentx-frontend-plus/package*.json ./
RUN npm install --legacy-peer-deps
COPY agentx-frontend-plus/ ./
RUN npm run build

# 多阶段构建 - 后端
FROM maven:3.9-openjdk-17 AS backend-builder
WORKDIR /app
COPY AgentX/pom.xml ./
COPY AgentX/src ./src
RUN mvn clean package -DskipTests

# 最终运行镜像
FROM openjdk:17-jdk-slim

# 安装必要工具
RUN apt-get update && apt-get install -y \
    nginx \
    curl \
    docker.io \
    docker-compose \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# 复制前端构建产物
COPY --from=frontend-builder /app/out /var/www/html/
COPY --from=frontend-builder /app/public /var/www/html/

# 复制后端 JAR 文件
COPY --from=backend-builder /app/target/*.jar /app/backend.jar

# 配置 nginx
RUN cat > /etc/nginx/sites-available/default << 'EOF'
server {
    listen 3000;
    server_name _;
    root /var/www/html;
    index index.html;
    
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    location /api/ {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
EOF

# 复制外部服务编排文件
COPY docker-compose.standalone.yml /app/docker-compose.yml
COPY .env.example /app/.env.example

# 创建 supervisor 配置
RUN cat > /etc/supervisor/conf.d/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stdout_logfile=/var/log/nginx.out.log
stderr_logfile=/var/log/nginx.err.log

[program:backend]
command=java -jar /app/backend.jar
autostart=true
autorestart=true
stdout_logfile=/var/log/backend.out.log
stderr_logfile=/var/log/backend.err.log
environment=SPRING_PROFILES_ACTIVE=docker

[program:external-services]
command=docker-compose -f /app/docker-compose.yml up
autostart=true
autorestart=true
stdout_logfile=/var/log/external.out.log
stderr_logfile=/var/log/external.err.log
directory=/app
EOF

# 暴露端口
EXPOSE 3000 8080 8081 5432 5433 8005

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000 && curl -f http://localhost:8080/api/health || exit 1

# 启动 supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]