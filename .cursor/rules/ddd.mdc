---
description: 
globs: 
alwaysApply: false
---
# AgentX 开发规范
## 依赖规范
### 后端
1.不允许使用lombok依赖！
2.添加依赖时需要遵循我的意见



## 1. DDD架构规范

### 1.1 目录结构

遵循以下目录结构组织代码：

```
org.xhy
  ├── domain                # 领域层
  │   └── {业务领域}
  │       ├── model         # 领域模型
  │       ├── repository    # 仓储接口
  │       ├── service       # 领域服务
  │       └── event         # 领域事件
  │
  ├── application           # 应用层
  │   └── {业务领域}
  │       ├── service       # 应用服务
  │       ├── dto           # 数据传输对象
  │       └── assembler     # DTO转换器
  │
  ├── interfaces            # 接口层
  │   ├── api               # API控制器
  │   │   └── {业务领域}
  │   ├── dto               # 接口数据传输对象
  │   │   └── {业务领域}
  │   └── facade            # 外部系统门面
  │       └── {业务领域}
  │
  └── infrastructure        # 基础设施层
      ├── persistence       # 持久化相关
      │   ├── po            # 持久化对象
      │   └── mapper        # MyBatis映射接口
      ├── repository        # 仓储实现
      ├── config            # 配置
      └── util              # 工具类
```

### 1.2 分层职责

- **领域层**: 核心业务逻辑，领域模型及相关行为
- **应用层**: 业务流程编排，用例实现
- **接口层**: 外部接口，处理请求和响应
- **基础设施层**: 技术细节实现，提供技术支持

### 1.3 领域模型规范

- 聚合根: 负责保证聚合内所有实体和值对象的一致性
- 实体: 具有唯一标识的对象
- 值对象: 没有唯一标识，通过属性值确定的对象
- 领域服务: 不自然归属于任何实体的业务逻辑

## 2. 命名规范

### 2.1 类命名

- 控制器: `{领域名}Controller`
  - 例: `ConversationController`
- 应用服务: `{领域名}Service`
  - 例: `ConversationService`
- 领域服务: `{领域名}DomainService`
  - 例: `ConversationDomainService`
- 领域模型: 使用具体业务名称
  - 例: `Message`, `Session`
- 仓储接口: `{模型名}Repository`
  - 例: `MessageRepository`
- 仓储实现: `{模型名}RepositoryImpl`
  - 例: `MessageRepositoryImpl`
- DTO: `{模型名}DTO`
  - 例: `MessageDTO`
- 请求/响应对象: `{模型名}Request`, `{模型名}Response`
  - 例: `MessageRequest`, `MessageResponse`
- 持久化对象: `{模型名}PO`
  - 例: `MessagePO`
- Mapper: `{模型名}Mapper`
  - 例: `MessageMapper`

### 2.2 方法命名

- 查询方法: `findXXX`, `getXXX`, `queryXXX`
- 保存方法: `save`, `create`, `insert`
- 更新方法: `update`
- 删除方法: `delete`, `remove`
- 列表查询: `listXXX`, `findAllXXX`
- 统计查询: `countXXX`
- 批量操作: `batchXXX`

### 2.3 变量命名

- 使用驼峰命名法
- 布尔类型变量使用 `isXXX`, `hasXXX`, `canXXX` 形式
- 集合类型变量使用复数形式

### 2.4 常量命名

- 全部大写，单词间用下划线分隔
- 例: `MAX_RETRY_COUNT`, `DEFAULT_TIMEOUT`

## 3. API规范

### 3.1 路由设计

- REST风格API
- 资源路径: `/api/{业务领域}/{资源}`
- 例: `/api/conversation/messages`

### 3.2 HTTP方法

- GET: 查询资源
- POST: 创建资源
- PUT: 全量更新资源
- PATCH: 部分更新资源
- DELETE: 删除资源

### 3.3 状态码使用

- 200: 成功
- 400: 请求参数错误
- 401: 未认证
- 403: 权限不足
- 404: 资源不存在
- 500: 服务器内部错误

### 3.4 响应格式

统一返回格式:

```json
{
  "code": 200,
  "message": "操作成功",
  "data": {}
}
```

## 4. 数据库规范

### 4.1 表命名

- 使用小写字母，单词间用下划线分隔
- 使用复数形式
- 例: `messages`, `user_profiles`

### 4.2 字段命名

- 使用小写字母，单词间用下划线分隔
- 主键统一使用 `id`
- 创建时间: `created_at`
- 更新时间: `updated_at`
- 逻辑删除: `is_deleted`

### 4.3 索引命名

- 主键索引: `pk_{表名}`
- 唯一索引: `uk_{表名}_{字段名}`
- 普通索引: `idx_{表名}_{字段名}`

## 5. 代码质量规范

### 5.1 异常处理

- 使用自定义异常体系
- 在适当的层次处理异常
- 不要吞噬异常
- 记录关键异常信息

### 5.2 日志规范

- 按级别使用日志
  - ERROR: 系统错误
  - WARN: 警告信息
  - INFO: 关键业务信息
  - DEBUG: 开发调试信息
- 包含上下文信息
- 避免敏感信息泄露

### 5.3 注释规范

- 类注释: 说明类的用途和职责
- 方法注释: 说明方法功能、参数和返回值
- 复杂逻辑需要添加行内注释

### 5.4 单元测试

- 保持测试覆盖率
- 测试方法命名: `test{被测方法}_{测试场景}`
- 遵循AAA原则: Arrange-Act-Assert

## 6. 工具库使用规范

### 6.1 MyBatis-Plus

- 禁止使用通用Mapper直接操作数据库
- 复杂查询使用XML配置
- 自定义SQL必须经过安全检查
- 使用 mybatisplus 相关函数操作sql

### 6.2 工具类

- 优先使用项目工具类
- 其次使用Hutool等第三方工具库
- 避免重复造轮子

### 6.3 线程安全

- 避免修改共享状态
- 谨慎使用静态变量
- 使用线程安全集合

## 7. 安全规范

### 7.1 输入验证

- 所有外部输入必须验证
- 使用validation注解进行参数校验
- 防止SQL注入、XSS等攻击

### 7.2 敏感信息

- 敏感信息不得明文存储
- 日志中不得包含敏感信息
- API响应中不返回敏感信息

## 8. 性能规范

### 8.1 数据库优化

- 合理使用索引
- 避免N+1查询问题
- 大数据量分页查询

### 8.2 缓存使用

- 合理使用缓存提高性能
- 注意缓存一致性问题
- 设置适当的过期策略

### 8.3 资源释放

- 及时释放数据库连接
- 关闭IO流
- 适当使用try-with-resources

## 9. Git提交规范

### 9.1 提交信息

格式: `类型(范围): 简短描述`

类型:
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码风格调整
- refactor: 重构
- test: 测试相关
- chore: 构建/依赖/工具等

例: `feat(conversation): 新增会话创建功能`

### 9.2 分支管理

- master: 主分支，稳定版本
- develop: 开发分支
- feature/*: 功能分支
- bugfix/*: 问题修复分支
- release/*: 版本发布分支

## 10. 文档规范

### 10.1 必要文档

- README.md: 项目说明
- 架构文档: 说明系统架构和关键设计

### 10.2 文档更新

- 代码变更时同步更新文档
- 保持文档的准确性和时效性
