---
description: java开发规范
globs: 
alwaysApply: false
---
# Java开发规范

1.不要使用lombok
2.不要自行下载依赖
3.sql使用mybatis plus 的写法
例如：
```
 Wrapper<ProviderEntity> wrapper = Wrappers.<ProviderEntity>lambdaQuery()
                .eq(ProviderEntity::getUserId, userId)
                .or()
                .eq(ProviderEntity::getIsOfficial, true);
        List<ProviderEntity> providers = providerRepository.selectList(wrapper);
```
4.如果涉及到携带更新的操作，需要使用 MyBatisPlusExtRepository 类的带检查的更新方法
5.涉及到更新操作，需要注意权限问题，用户更新和管理员更新，例如：
```
 public void updateProvider(ProviderEntity provider) {
        validateProviderProtocol(provider.getProtocol());
        LambdaUpdateWrapper<ProviderEntity> wrapper = Wrappers
                .<ProviderEntity>lambdaUpdate()
                .eq(ProviderEntity::getId, provider.getId())
                .eq(provider.needCheckUserId(),ProviderEntity::getUserId, provider.getUserId());
        providerRepository.checkedUpdate(provider,wrapper);
    }
```
每个 entity 都会继承 BaseEntity，在 BaseEntity 中会检查是否是用户更新,如果是管理员更新，代码如下：
```
 public ProviderDTO updateProvider(ProviderUpdateRequest providerUpdateRequest, String userId) {
        ProviderEntity provider = ProviderAssembler.toEntity(providerUpdateRequest, userId);
        provider.setAdmin();
        llmDomainService.updateProvider(provider);
        return null;
    }
```
只需要在entity调用provider.setAdmin();进行设置即可
6.涉及到数据库字段为json，例如：
```
   @TableField(typeHandler = ProviderConfigConverter.class)
    private ProviderConfig config;
```
需要参考 AgentX/src/main/java/org/xhy/infrastructure/converter 目录下进行转换类的开发

7.使用自定义异常类进行抛出，例如：
```
 throw new BusinessException("数据更新失败");
```

8.使用 restfult 风格的api

9.在 repository 层中的命名规范如下：
9.1getXxx 结果必须有值，如果没有值，则抛出异常，例如：
```
public ProviderEntity getProvider(String providerId, String userId) {
    Wrapper<ProviderEntity> wrapper = Wrappers.<ProviderEntity>lambdaQuery()
        .eq(ProviderEntity::getId, providerId)
        .eq(ProviderEntity::getUserId, userId);
    ProviderEntity provider = providerRepository.selectOne(wrapper);
    if (provider == null) {
        throw new BusinessException("服务商不存在");
    }
    return provider;
}
```

9.2findXxx 结果可以是null
```
public ProviderEntity findProvider(String providerId, String userId) {
    Wrapper<ProviderEntity> wrapper = Wrappers.<ProviderEntity>lambdaQuery()
        .eq(ProviderEntity::getId, providerId)
        .eq(ProviderEntity::getUserId, userId);
    return providerRepository.selectOne(wrapper);
}
```
9.3使用 checkProviderExists 来判断对应的 entity 是否存在，并且抛出异常
9.4使用 existXxx 来判断对应的 entity 是否存在，返回 boolean

10.分层架构
- api层接收的对象必须使用 @Validated 注解校验参数，例如：
```
 public Result<AgentDTO> createAgent(@RequestBody @Validated CreateAgentRequest request) {
        String userId = UserContext.getCurrentUserId();
        AgentDTO agent = agentAppService.createAgent(request, userId);
        return Result.success(agent);
    }
```

- api层返回的对象只能是 xxxDTO
- application 调用 domain 必须是 entity 类，例如：
```
 public ProviderDTO createProvider(ProviderCreateRequest providerCreateRequest,String userId) {
        ProviderEntity provider = ProviderAssembler.toEntity(providerCreateRequest, userId);
        provider.setIsOfficial(true);
        return ProviderAssembler.toDTO(llmDomainService.createProvider(provider));
    }
```
- 转换类通过 application 下的 assembler 实现
- domain 只能接收 entity，并且响应也只能是 entity 或者聚合根
- 三层校验：api层校验：校验字段格式，必填等、application层校验：业务规则校验，数据存在性校验，操作权限校验、domain层校验：实体状态校验，领域规则验证

11注释规范
- 每个类中的字段以及方法都需要 javadoc 注释说明


